// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: comment.sql

package db

import (
	"context"
	"database/sql"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comment (
                     entry_id,
                     user_id,
                     content
) VALUES (
          $1, $2, $3
         ) RETURNING id, entry_id, user_id, content, commented_on
`

type CreateCommentParams struct {
	EntryID sql.NullInt64  `json:"entry_id"`
	UserID  sql.NullString `json:"user_id"`
	Content sql.NullString `json:"content"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.queryRow(ctx, q.createCommentStmt, createComment, arg.EntryID, arg.UserID, arg.Content)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.UserID,
		&i.Content,
		&i.CommentedOn,
	)
	return i, err
}

const deleteCommentById = `-- name: DeleteCommentById :one
DELETE FROM comment
WHERE id = $1
RETURNING id, entry_id, user_id, content, commented_on
`

func (q *Queries) DeleteCommentById(ctx context.Context, id int64) (Comment, error) {
	row := q.queryRow(ctx, q.deleteCommentByIdStmt, deleteCommentById, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.UserID,
		&i.Content,
		&i.CommentedOn,
	)
	return i, err
}
