// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: trip.sql

package db

import (
	"context"
	"database/sql"
)

const createTrip = `-- name: CreateTrip :one
INSERT INTO trip (
    title,
    country,
    start_date,
    end_date
) VALUES (
             $1, $2, $3, $4
         ) RETURNING id, title, country, start_date, end_date
`

type CreateTripParams struct {
	Title     sql.NullString `json:"title"`
	Country   sql.NullString `json:"country"`
	StartDate sql.NullTime   `json:"start_date"`
	EndDate   sql.NullTime   `json:"end_date"`
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (Trip, error) {
	row := q.queryRow(ctx, q.createTripStmt, createTrip,
		arg.Title,
		arg.Country,
		arg.StartDate,
		arg.EndDate,
	)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Country,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const deleteTrip = `-- name: DeleteTrip :one
DELETE FROM trip
WHERE id = $1
    RETURNING id, title, country, start_date, end_date
`

func (q *Queries) DeleteTrip(ctx context.Context, id int64) (Trip, error) {
	row := q.queryRow(ctx, q.deleteTripStmt, deleteTrip, id)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Country,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const getTrip = `-- name: GetTrip :one
SELECT id, title, country, start_date, end_date FROM trip
WHERE id = $1
`

func (q *Queries) GetTrip(ctx context.Context, id int64) (Trip, error) {
	row := q.queryRow(ctx, q.getTripStmt, getTrip, id)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Country,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const listTrips = `-- name: ListTrips :many
SELECT id, title, country, start_date, end_date FROM trip
ORDER BY start_date
`

func (q *Queries) ListTrips(ctx context.Context) ([]Trip, error) {
	rows, err := q.query(ctx, q.listTripsStmt, listTrips)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Trip{}
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Country,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTripCountry = `-- name: UpdateTripCountry :one
UPDATE trip
SET country = $2
WHERE id = $1
    RETURNING id, title, country, start_date, end_date
`

type UpdateTripCountryParams struct {
	ID      int64          `json:"id"`
	Country sql.NullString `json:"country"`
}

func (q *Queries) UpdateTripCountry(ctx context.Context, arg UpdateTripCountryParams) (Trip, error) {
	row := q.queryRow(ctx, q.updateTripCountryStmt, updateTripCountry, arg.ID, arg.Country)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Country,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const updateTripStartDate = `-- name: UpdateTripStartDate :one
UPDATE trip
SET start_date = $2
WHERE id = $1
    RETURNING id, title, country, start_date, end_date
`

type UpdateTripStartDateParams struct {
	ID        int64        `json:"id"`
	StartDate sql.NullTime `json:"start_date"`
}

func (q *Queries) UpdateTripStartDate(ctx context.Context, arg UpdateTripStartDateParams) (Trip, error) {
	row := q.queryRow(ctx, q.updateTripStartDateStmt, updateTripStartDate, arg.ID, arg.StartDate)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Country,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const updateTripTitle = `-- name: UpdateTripTitle :one
UPDATE trip
SET title = $2
WHERE id = $1
    RETURNING id, title, country, start_date, end_date
`

type UpdateTripTitleParams struct {
	ID    int64          `json:"id"`
	Title sql.NullString `json:"title"`
}

func (q *Queries) UpdateTripTitle(ctx context.Context, arg UpdateTripTitleParams) (Trip, error) {
	row := q.queryRow(ctx, q.updateTripTitleStmt, updateTripTitle, arg.ID, arg.Title)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Country,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}
