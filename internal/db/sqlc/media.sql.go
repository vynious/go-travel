// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: media.sql

package db

import (
	"context"
	"database/sql"
)

const createMedia = `-- name: CreateMedia :one
INSERT INTO media (
                   entry_id,
                   url
) VALUES (
          $1, $2
         ) RETURNING id, entry_id, url
`

type CreateMediaParams struct {
	EntryID sql.NullInt64  `json:"entry_id"`
	Url     sql.NullString `json:"url"`
}

func (q *Queries) CreateMedia(ctx context.Context, arg CreateMediaParams) (Medium, error) {
	row := q.queryRow(ctx, q.createMediaStmt, createMedia, arg.EntryID, arg.Url)
	var i Medium
	err := row.Scan(&i.ID, &i.EntryID, &i.Url)
	return i, err
}

const deleteMediaById = `-- name: DeleteMediaById :one
DELETE FROM media
WHERE id = $1
    RETURNING id, entry_id, url
`

func (q *Queries) DeleteMediaById(ctx context.Context, id int64) (Medium, error) {
	row := q.queryRow(ctx, q.deleteMediaByIdStmt, deleteMediaById, id)
	var i Medium
	err := row.Scan(&i.ID, &i.EntryID, &i.Url)
	return i, err
}

const getAllMediaByEntryId = `-- name: GetAllMediaByEntryId :many
SELECT id, entry_id, url
FROM media
WHERE entry_id = $1
`

func (q *Queries) GetAllMediaByEntryId(ctx context.Context, entryID sql.NullInt64) ([]Medium, error) {
	rows, err := q.query(ctx, q.getAllMediaByEntryIdStmt, getAllMediaByEntryId, entryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Medium{}
	for rows.Next() {
		var i Medium
		if err := rows.Scan(&i.ID, &i.EntryID, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMediaByTripId = `-- name: GetAllMediaByTripId :many
SELECT media.id, media.entry_id, media.url
FROM media
         JOIN travel_entry ON media.entry_id = travel_entry.id
WHERE travel_entry.trip_id = $1
`

func (q *Queries) GetAllMediaByTripId(ctx context.Context, tripID sql.NullInt64) ([]Medium, error) {
	rows, err := q.query(ctx, q.getAllMediaByTripIdStmt, getAllMediaByTripId, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Medium{}
	for rows.Next() {
		var i Medium
		if err := rows.Scan(&i.ID, &i.EntryID, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMediaByTripIdAndUserId = `-- name: GetAllMediaByTripIdAndUserId :many
SELECT media.id, media.entry_id, media.url
FROM media
         JOIN travel_entry ON media.entry_id = travel_entry.id
         JOIN user_trip ON travel_entry.trip_id = user_trip.trip_id
WHERE user_trip.trip_id = $1 AND user_trip.user_id = $2
`

type GetAllMediaByTripIdAndUserIdParams struct {
	TripID int64 `json:"trip_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetAllMediaByTripIdAndUserId(ctx context.Context, arg GetAllMediaByTripIdAndUserIdParams) ([]Medium, error) {
	rows, err := q.query(ctx, q.getAllMediaByTripIdAndUserIdStmt, getAllMediaByTripIdAndUserId, arg.TripID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Medium{}
	for rows.Next() {
		var i Medium
		if err := rows.Scan(&i.ID, &i.EntryID, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMediaByUserId = `-- name: GetAllMediaByUserId :many
SELECT media.id, media.entry_id, media.url
FROM media
         JOIN travel_entry ON media.entry_id = travel_entry.id
         JOIN user_trip ON travel_entry.trip_id = user_trip.trip_id
WHERE user_trip.user_id = $1
`

func (q *Queries) GetAllMediaByUserId(ctx context.Context, userID int64) ([]Medium, error) {
	rows, err := q.query(ctx, q.getAllMediaByUserIdStmt, getAllMediaByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Medium{}
	for rows.Next() {
		var i Medium
		if err := rows.Scan(&i.ID, &i.EntryID, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMediaById = `-- name: UpdateMediaById :one
UPDATE media
SET url = $2
WHERE id = $1
    RETURNING id, entry_id, url
`

type UpdateMediaByIdParams struct {
	ID  int64          `json:"id"`
	Url sql.NullString `json:"url"`
}

func (q *Queries) UpdateMediaById(ctx context.Context, arg UpdateMediaByIdParams) (Medium, error) {
	row := q.queryRow(ctx, q.updateMediaByIdStmt, updateMediaById, arg.ID, arg.Url)
	var i Medium
	err := row.Scan(&i.ID, &i.EntryID, &i.Url)
	return i, err
}
