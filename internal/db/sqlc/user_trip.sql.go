// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user_trip.sql

package db

import (
	"context"
)

const createUserTrip = `-- name: CreateUserTrip :one
INSERT INTO user_trip (
                       trip_id,
                       user_id
) VALUES (
          $1, $2
         ) RETURNING trip_id, user_id
`

type CreateUserTripParams struct {
	TripID int64  `json:"trip_id"`
	UserID string `json:"user_id"`
}

func (q *Queries) CreateUserTrip(ctx context.Context, arg CreateUserTripParams) (UserTrip, error) {
	row := q.queryRow(ctx, q.createUserTripStmt, createUserTrip, arg.TripID, arg.UserID)
	var i UserTrip
	err := row.Scan(&i.TripID, &i.UserID)
	return i, err
}

const deleteUserTrip = `-- name: DeleteUserTrip :one
DELETE FROM USER_TRIP
WHERE user_id = $1
  AND trip_id = $2
RETURNING trip_id, user_id
`

type DeleteUserTripParams struct {
	UserID string `json:"user_id"`
	TripID int64  `json:"trip_id"`
}

func (q *Queries) DeleteUserTrip(ctx context.Context, arg DeleteUserTripParams) (UserTrip, error) {
	row := q.queryRow(ctx, q.deleteUserTripStmt, deleteUserTrip, arg.UserID, arg.TripID)
	var i UserTrip
	err := row.Scan(&i.TripID, &i.UserID)
	return i, err
}

const getUserTripsByTripId = `-- name: GetUserTripsByTripId :many
SELECT trip_id, user_id FROM USER_TRIP
WHERE trip_id = $1
`

func (q *Queries) GetUserTripsByTripId(ctx context.Context, tripID int64) ([]UserTrip, error) {
	rows, err := q.query(ctx, q.getUserTripsByTripIdStmt, getUserTripsByTripId, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserTrip{}
	for rows.Next() {
		var i UserTrip
		if err := rows.Scan(&i.TripID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserTripsByUserId = `-- name: GetUserTripsByUserId :many
SELECT trip_id, user_id FROM USER_TRIP
WHERE user_id = $1
`

func (q *Queries) GetUserTripsByUserId(ctx context.Context, userID string) ([]UserTrip, error) {
	rows, err := q.query(ctx, q.getUserTripsByUserIdStmt, getUserTripsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserTrip{}
	for rows.Next() {
		var i UserTrip
		if err := rows.Scan(&i.TripID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
