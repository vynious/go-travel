// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name,
    username,
    email
) VALUES (
             $1, $2, $3
         ) RETURNING id, name, username, email, profile_picture, creation_date
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.Name, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.ProfilePicture,
		&i.CreationDate,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE id = $1
    RETURNING id, name, username, email, profile_picture, creation_date
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.deleteUserStmt, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.ProfilePicture,
		&i.CreationDate,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, username, email, profile_picture, creation_date FROM users
WHERE id = $1
    LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.ProfilePicture,
		&i.CreationDate,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT email FROM users
WHERE username = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, username string) (string, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, username)
	var email string
	err := row.Scan(&email)
	return email, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, username, email, profile_picture, creation_date FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.Email,
			&i.ProfilePicture,
			&i.CreationDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE users
SET email = $2
WHERE id = $1
    RETURNING id, name, username, email, profile_picture, creation_date
`

type UpdateUserEmailParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserEmailStmt, updateUserEmail, arg.ID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.ProfilePicture,
		&i.CreationDate,
	)
	return i, err
}

const updateUserName = `-- name: UpdateUserName :one
UPDATE users
SET name = $2
WHERE id = $1
    RETURNING id, name, username, email, profile_picture, creation_date
`

type UpdateUserNameParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserNameStmt, updateUserName, arg.ID, arg.Name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.ProfilePicture,
		&i.CreationDate,
	)
	return i, err
}

const updateUserProfilePicture = `-- name: UpdateUserProfilePicture :one
UPDATE users
SET profile_picture = $2
WHERE id = $1
    RETURNING id, name, username, email, profile_picture, creation_date
`

type UpdateUserProfilePictureParams struct {
	ID             int64          `json:"id"`
	ProfilePicture sql.NullString `json:"profile_picture"`
}

func (q *Queries) UpdateUserProfilePicture(ctx context.Context, arg UpdateUserProfilePictureParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserProfilePictureStmt, updateUserProfilePicture, arg.ID, arg.ProfilePicture)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.ProfilePicture,
		&i.CreationDate,
	)
	return i, err
}

const updateUserUsername = `-- name: UpdateUserUsername :one
UPDATE users
SET username = $2
WHERE id = $1
    RETURNING id, name, username, email, profile_picture, creation_date
`

type UpdateUserUsernameParams struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUserUsername(ctx context.Context, arg UpdateUserUsernameParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserUsernameStmt, updateUserUsername, arg.ID, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.ProfilePicture,
		&i.CreationDate,
	)
	return i, err
}
