// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: travel_entry.sql

package db

import (
	"context"
	"database/sql"
)

const createTravelEntry = `-- name: CreateTravelEntry :one
INSERT INTO travel_entry (
    user_id,
    trip_id,
    location,
    description
) VALUES (
             $1, $2, $3, $4
         ) RETURNING id, user_id, trip_id, location, description
`

type CreateTravelEntryParams struct {
	UserID      sql.NullString `json:"user_id"`
	TripID      sql.NullInt64  `json:"trip_id"`
	Location    sql.NullString `json:"location"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateTravelEntry(ctx context.Context, arg CreateTravelEntryParams) (TravelEntry, error) {
	row := q.queryRow(ctx, q.createTravelEntryStmt, createTravelEntry,
		arg.UserID,
		arg.TripID,
		arg.Location,
		arg.Description,
	)
	var i TravelEntry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TripID,
		&i.Location,
		&i.Description,
	)
	return i, err
}

const deleteTravelEntry = `-- name: DeleteTravelEntry :one
DELETE FROM travel_entry
WHERE id = $1
    RETURNING id, user_id, trip_id, location, description
`

func (q *Queries) DeleteTravelEntry(ctx context.Context, id int64) (TravelEntry, error) {
	row := q.queryRow(ctx, q.deleteTravelEntryStmt, deleteTravelEntry, id)
	var i TravelEntry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TripID,
		&i.Location,
		&i.Description,
	)
	return i, err
}

const getAllTravelEntry = `-- name: GetAllTravelEntry :many
SELECT id, user_id, trip_id, location, description
FROM travel_entry
`

func (q *Queries) GetAllTravelEntry(ctx context.Context) ([]TravelEntry, error) {
	rows, err := q.query(ctx, q.getAllTravelEntryStmt, getAllTravelEntry)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TravelEntry{}
	for rows.Next() {
		var i TravelEntry
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TripID,
			&i.Location,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTravelEntryByTripId = `-- name: GetAllTravelEntryByTripId :many
SELECT id, user_id, trip_id, location, description
FROM travel_entry
WHERE trip_id = $1
`

func (q *Queries) GetAllTravelEntryByTripId(ctx context.Context, tripID sql.NullInt64) ([]TravelEntry, error) {
	rows, err := q.query(ctx, q.getAllTravelEntryByTripIdStmt, getAllTravelEntryByTripId, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TravelEntry{}
	for rows.Next() {
		var i TravelEntry
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TripID,
			&i.Location,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTravelEntryByUserIdAndTripId = `-- name: GetAllTravelEntryByUserIdAndTripId :many
SELECT id, user_id, trip_id, location, description
FROM travel_entry
WHERE trip_id = $1
  AND user_id = $2
`

type GetAllTravelEntryByUserIdAndTripIdParams struct {
	TripID sql.NullInt64  `json:"trip_id"`
	UserID sql.NullString `json:"user_id"`
}

func (q *Queries) GetAllTravelEntryByUserIdAndTripId(ctx context.Context, arg GetAllTravelEntryByUserIdAndTripIdParams) ([]TravelEntry, error) {
	rows, err := q.query(ctx, q.getAllTravelEntryByUserIdAndTripIdStmt, getAllTravelEntryByUserIdAndTripId, arg.TripID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TravelEntry{}
	for rows.Next() {
		var i TravelEntry
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TripID,
			&i.Location,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTravelEntryById = `-- name: GetTravelEntryById :one
SELECT id, user_id, trip_id, location, description
FROM travel_entry
WHERE id = $1
    LIMIT 1
`

func (q *Queries) GetTravelEntryById(ctx context.Context, id int64) (TravelEntry, error) {
	row := q.queryRow(ctx, q.getTravelEntryByIdStmt, getTravelEntryById, id)
	var i TravelEntry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TripID,
		&i.Location,
		&i.Description,
	)
	return i, err
}

const updateTravelEntryDescription = `-- name: UpdateTravelEntryDescription :one
UPDATE travel_entry
SET description = $2
WHERE id = $1
    RETURNING id, user_id, trip_id, location, description
`

type UpdateTravelEntryDescriptionParams struct {
	ID          int64          `json:"id"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateTravelEntryDescription(ctx context.Context, arg UpdateTravelEntryDescriptionParams) (TravelEntry, error) {
	row := q.queryRow(ctx, q.updateTravelEntryDescriptionStmt, updateTravelEntryDescription, arg.ID, arg.Description)
	var i TravelEntry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TripID,
		&i.Location,
		&i.Description,
	)
	return i, err
}

const updateTravelEntryLocation = `-- name: UpdateTravelEntryLocation :one
UPDATE travel_entry
SET location = $2
WHERE id = $1
    RETURNING id, user_id, trip_id, location, description
`

type UpdateTravelEntryLocationParams struct {
	ID       int64          `json:"id"`
	Location sql.NullString `json:"location"`
}

func (q *Queries) UpdateTravelEntryLocation(ctx context.Context, arg UpdateTravelEntryLocationParams) (TravelEntry, error) {
	row := q.queryRow(ctx, q.updateTravelEntryLocationStmt, updateTravelEntryLocation, arg.ID, arg.Location)
	var i TravelEntry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TripID,
		&i.Location,
		&i.Description,
	)
	return i, err
}
